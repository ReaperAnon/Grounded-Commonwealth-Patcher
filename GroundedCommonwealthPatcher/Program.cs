using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;

using GroundedCommonwealthPatcher.Settings;

using Noggog;

namespace GroundedCommonwealthPatcher
{
    public class Program
    {
        public static Lazy<GCConfig> Config = null!;

        public static List<string> RemoveAll { get; } = new() { "raider", "gunner", "bostrait", "rragent", "minute", "trigger", "trapper" };
        public static List<string> RemoveSome { get; } = new() { "scav", "childrenof", "workshop", "instit" };

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddRunnabilityCheck(AssertModPresent)
                .SetAutogeneratedSettings(nickname: "Mod Settings", path: "settings.json", out Config)
                .AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.Fallout4, "Grounded Commonwealth Patch.esp")
                .Run(args);
        }

        public static void AssertModPresent(IRunnabilityState state)
        {
            state.LoadOrder.AssertListsMod("Grounded Commonwealth.esp");
        }

        public static bool WasNpcChanged(Npc.Mask<bool> moddedFields)
        {
            return moddedFields.Flags || moddedFields.Name || moddedFields.ShortName || moddedFields.HairColor; // fill out with changes that should prompt an npc to be patched
        }

        public static bool WasSexChanged(INpcGetter baseNpc, INpcGetter moddedNpc)
        {
            return ((baseNpc.Flags & Npc.Flag.Female) > 0 && (moddedNpc.Flags & Npc.Flag.Female) == 0) || ((baseNpc.Flags & Npc.Flag.Female) == 0 && (moddedNpc.Flags & Npc.Flag.Female) > 0);
        }

        public static void MergeStageText(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Quest moddedQuest, IModContext<IFallout4Mod, IFallout4ModGetter, IQuest, IQuestGetter> vanillaQuest, IModContext<IFallout4Mod, IFallout4ModGetter, IQuest, IQuestGetter> winningQuest)
        {
            if (moddedQuest.Stages.Count != winningQuest.Record.Stages.Count)
                return;

            for (int i = 0; i < moddedQuest.Stages.Count; i++)
            {
                if (moddedQuest.Stages[i].LogEntries.Count != winningQuest.Record.Stages[i].LogEntries.Count)
                    continue;

                for (int j = 0; j < moddedQuest.Stages[i].LogEntries.Count; j++)
                {
                    string vanillaNoteText = vanillaQuest.Record.Stages[i].LogEntries[j].Note ?? "";
                    string vanillaLogText = vanillaQuest.Record.Stages[i].LogEntries[j].Entry?.String ?? "";
                    string moddedNoteText = moddedQuest.Stages[i].LogEntries[j].Note ?? "";
                    string moddedLogText = moddedQuest.Stages[i].LogEntries[j].Entry?.String ?? "";
                    string winningNoteText = winningQuest.Record.Stages[i].LogEntries[j].Note ?? "";
                    string winningLogText = winningQuest.Record.Stages[i].LogEntries[j].Entry?.String ?? "";

                    if (!vanillaNoteText.Equals(moddedNoteText) && !moddedNoteText.Equals(winningNoteText))
                    {
                        var newQuest = winningQuest.GetOrAddAsOverride(state.PatchMod);
                        newQuest.Stages[i].LogEntries[j].Note = moddedQuest.Stages[i].LogEntries[j].Note;
                        Console.WriteLine($"{vanillaNoteText} - {moddedNoteText}\n");
                    }

                    if (!vanillaLogText.Equals(moddedLogText) && !moddedLogText.Equals(winningLogText))
                    {
                        var newQuest = winningQuest.GetOrAddAsOverride(state.PatchMod);
                        newQuest.Stages[i].LogEntries[j].Entry = moddedQuest.Stages[i].LogEntries[j].Entry;
                        Console.WriteLine($"{vanillaLogText} - {moddedLogText}\n");
                    }
                }
            }
        }

        public static void MergeObjectiveText(IPatcherState<IFallout4Mod, IFallout4ModGetter> state, Quest moddedQuest, IModContext<IFallout4Mod, IFallout4ModGetter, IQuest, IQuestGetter> vanillaQuest, IModContext<IFallout4Mod, IFallout4ModGetter, IQuest, IQuestGetter> winningQuest)
        {
            if (moddedQuest.Objectives.Count != winningQuest.Record.Objectives.Count)
                return;

            for (int i = 0; i < moddedQuest.Objectives.Count; i++)
            {
                string vanillaText = vanillaQuest.Record.Objectives[i].DisplayText?.String ?? "";
                string moddedText = moddedQuest.Objectives[i].DisplayText?.String ?? "";
                string winningText = winningQuest.Record.Objectives[i].DisplayText?.String ?? "";

                // If objective text was unchanged.
                if (vanillaText.Equals(moddedText))
                    continue;

                var newQuest = winningQuest.GetOrAddAsOverride(state.PatchMod);
                if (!moddedText.Equals(winningText))
                    newQuest.Objectives[i].DisplayText = moddedQuest.Objectives[i].DisplayText;
            }
        }

        public static void RunPatch(IPatcherState<IFallout4Mod, IFallout4ModGetter> state)
        {
            Fallout4Mod GroundedCommonwealth = Fallout4Mod.CreateFromBinary(Path.Combine(state.DataFolderPath, "Grounded Commonwealth.esp"));

            float minBrightnessVal = -1;
            if (Config.Value.TransferLooks)
                minBrightnessVal = System.Drawing.Color.FromArgb(1, 209, 201, 192).GetBrightness();

            foreach (var moddedNpc in GroundedCommonwealth.Npcs)
            {
                List<IModContext<IFallout4Mod, IFallout4ModGetter, INpc, INpcGetter>> npcOverrides = moddedNpc.ToLink().ResolveAllContexts<IFallout4Mod, IFallout4ModGetter, INpc, INpcGetter>(state.LinkCache).ToList();
                if (npcOverrides.Count <= 0)
                    throw new Exception($"Couldn't resolve {moddedNpc}");

                // Skip unique NPCs.
                if (npcOverrides.Count == 1)
                    continue;

                Npc.TranslationMask translationMask = new Npc.TranslationMask(true) { Version2 = false, VersionControl = false, FormVersion = false, Fallout4MajorRecordFlags = false, MajorRecordFlagsRaw = false };
                // Skip NPCs that were not overridden by another mod.
                if (moddedNpc.Equals(npcOverrides[0].Record, translationMask))
                    continue;

                bool wasChanged = false;
                Console.WriteLine($"\nProcessing {moddedNpc}");
                Npc newNpc = npcOverrides[0].Record.DeepCopy();

                // Check what GC changed from vanilla.
                Npc.Mask<bool> moddedFields = moddedNpc.GetEqualsMask(npcOverrides[npcOverrides.Count - 1].Record).Translate(x => x = !x);

                // Things go here that are safe to be changed by other mods if GC didn't change them.
                if (moddedFields.Flags)
                {
                    // determine what flags were changed from vanilla
                    var bitMask = moddedNpc.Flags ^ npcOverrides[npcOverrides.Count - 1].Record.Flags;

                    // change the same flags in the winning record
                    newNpc.Flags = (newNpc.Flags & ~bitMask) | (moddedNpc.Flags & bitMask);

                    Console.WriteLine("\t- Flags Changed");
                    wasChanged = true;
                }

                if (newNpc.Items is not null && (moddedFields.Items?.Overall ?? false))
                {
                    List<ContainerEntry> newItems = moddedNpc.Items.EmptyIfNull().Where(entry => !npcOverrides[npcOverrides.Count - 1].Record.Items.EmptyIfNull().Contains(entry)).ToList();
                    List<IContainerEntryGetter> removedItems = npcOverrides[npcOverrides.Count - 1].Record.Items.EmptyIfNull().Where(entry => !moddedNpc.Items.EmptyIfNull().Contains(entry)).ToList();
                    if(newItems.Any())
                    {
                        Console.WriteLine("\t- New Items Added");
                        newNpc.Items.AddRange(newItems);
                        wasChanged = true;
                    }
                    
                    if(removedItems.Any())
                    {
                        wasChanged = true;
                        Console.WriteLine("\t- Old Items Removed");
                        foreach (var item in removedItems)
                            newNpc.Items.RemoveAll(entry => entry.Item.Item.Equals(item.Item.Item));
                    }
                }

                if(moddedFields.Factions?.Overall ?? false)
                {
                    if(!newNpc.Factions.Equals(moddedNpc.Factions))
                    {
                        List<RankPlacement> newFactions = moddedNpc.Factions.Where(faction => !npcOverrides[npcOverrides.Count - 1].Record.Factions.Contains(faction)).ToList();

                        if (newFactions.Any())
                        {
                            newNpc.Factions.AddRange(newFactions);

                            Console.WriteLine("\t- Factions Changed");
                            wasChanged = true;
                        }
                    }
                }

                if(moddedFields.Packages?.Overall ?? false)
                {
                    List<IFormLinkGetter<IPackageGetter>> newPackages = moddedNpc.Packages.Where(package => !npcOverrides[npcOverrides.Count - 1].Record.Packages.Contains(package)).ToList();
                    newNpc.Packages.AddRange(newPackages);

                    Console.WriteLine("\t- AI Packages Changed");
                    wasChanged = true;
                }

                if (moddedFields.UseTemplateActors)
                {
                    var bitMask = moddedNpc.UseTemplateActors ^ npcOverrides[npcOverrides.Count - 1].Record.UseTemplateActors;

                    newNpc.UseTemplateActors = (newNpc.UseTemplateActors & ~bitMask) | (moddedNpc.UseTemplateActors & bitMask);

                    Console.WriteLine("\t- Template Actor Flags Changed");
                    wasChanged = true;
                }

                if (moddedFields.TemplateActors?.Overall ?? false)
                {
                    if (moddedNpc.TemplateActors is not null)
                    {
                        if (newNpc.TemplateActors is null)
                            newNpc.TemplateActors = new();

                        newNpc.TemplateActors.TraitTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.Traits) > 0 ? moddedNpc.TemplateActors.TraitTemplate : newNpc.TemplateActors.TraitTemplate;
                        newNpc.TemplateActors.StatsTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.Stats) > 0 ? moddedNpc.TemplateActors.StatsTemplate : newNpc.TemplateActors.StatsTemplate;
                        newNpc.TemplateActors.FactionsTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.Factions) > 0 ? moddedNpc.TemplateActors.FactionsTemplate : newNpc.TemplateActors.FactionsTemplate;
                        newNpc.TemplateActors.SpellListTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.SpellList) > 0 ? moddedNpc.TemplateActors.SpellListTemplate : newNpc.TemplateActors.SpellListTemplate;
                        newNpc.TemplateActors.AiDataTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.AiData) > 0 ? moddedNpc.TemplateActors.AiDataTemplate : newNpc.TemplateActors.AiDataTemplate;
                        newNpc.TemplateActors.AiPackagesTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.AiPackages) > 0 ? moddedNpc.TemplateActors.AiPackagesTemplate : newNpc.TemplateActors.AiPackagesTemplate;
                        newNpc.TemplateActors.ModelOrAnimationTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.ModelOrAnimation) > 0 ? moddedNpc.TemplateActors.ModelOrAnimationTemplate : newNpc.TemplateActors.ModelOrAnimationTemplate;
                        newNpc.TemplateActors.BaseDataTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.BaseData) > 0 ? moddedNpc.TemplateActors.BaseDataTemplate : newNpc.TemplateActors.BaseDataTemplate;
                        newNpc.TemplateActors.InventoryTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.Inventory) > 0 ? moddedNpc.TemplateActors.InventoryTemplate : newNpc.TemplateActors.InventoryTemplate;
                        newNpc.TemplateActors.ScriptTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.Script) > 0 ? moddedNpc.TemplateActors.ScriptTemplate : newNpc.TemplateActors.ScriptTemplate;
                        newNpc.TemplateActors.DefPackListTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.DefPackList) > 0 ? moddedNpc.TemplateActors.DefPackListTemplate : newNpc.TemplateActors.DefPackListTemplate;
                        newNpc.TemplateActors.AttackDataTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.AttackData) > 0 ? moddedNpc.TemplateActors.AttackDataTemplate : newNpc.TemplateActors.AttackDataTemplate;
                        newNpc.TemplateActors.KeywordsTemplate = (moddedNpc.UseTemplateActors & Npc.TemplateActorType.Keywords) > 0 ? moddedNpc.TemplateActors.KeywordsTemplate : newNpc.TemplateActors.KeywordsTemplate;

                        Console.WriteLine("\t- Template Actors Changed");
                        wasChanged = true;
                    }
                    else newNpc.TemplateActors = null;
                }

                if (moddedFields.ObjectTemplates?.Overall ?? false)
                {
                    newNpc.ObjectTemplates = moddedNpc.ObjectTemplates;
                    Console.WriteLine("\t- Object Templates Changed");
                    wasChanged = true;
                }

                if (moddedFields.CrimeFaction)
                {
                    newNpc.CrimeFaction = moddedNpc.CrimeFaction;
                    Console.WriteLine("\t- Crime Faction Changed");
                }

                if (Config.Value.TransferLooks)
                {
                    bool shouldTransfer = false;
                    try
                    {
                        shouldTransfer = Config.Value.FullLooksTransfer || (npcOverrides[npcOverrides.Count - 1].Record.FaceTintingLayers.First(tint => tint.Index == 1156)?.Color.GetBrightness() ?? 1) < minBrightnessVal;
                    }
                    catch(InvalidOperationException)
                    {
                        // Couldn't find skin tint entry, means game uses the first in the race entry.
                    }

                    if ((WasSexChanged(npcOverrides[^1].Record, moddedNpc) || // sex changed or
                        shouldTransfer) && // different race or transfer all and
                        ((moddedFields.HeadParts?.Overall ?? false) || // looks were changed
                        (moddedFields.Morphs?.Overall ?? false) ||
                        (moddedFields.FaceTintingLayers?.Overall ?? false) ||
                        (moddedFields.FaceMorphs?.Overall ?? false) ||
                        (moddedFields.BodyMorphRegionValues?.Overall ?? false) ||
                        (moddedFields.Weight?.Overall ?? false) ||
                        moddedFields.HeadTexture ||
                        moddedFields.TextureLighting ||
                        moddedFields.HairColor ||
                        moddedFields.FacialMorphIntensity)
                    )
                    {
                        newNpc.HeadParts.RemoveAll(x => true);
                        newNpc.HeadParts.AddRange(moddedNpc.HeadParts);
                        newNpc.Morphs.RemoveAll(x => true);
                        newNpc.Morphs.AddRange(moddedNpc.Morphs);
                        newNpc.FaceTintingLayers.RemoveAll(x => true);
                        newNpc.FaceTintingLayers.AddRange(moddedNpc.FaceTintingLayers);
                        newNpc.FaceMorphs.RemoveAll(x => true);
                        newNpc.FaceMorphs.AddRange(moddedNpc.FaceMorphs);
                        newNpc.BodyMorphRegionValues = moddedNpc.BodyMorphRegionValues;
                        newNpc.Weight = moddedNpc.Weight;
                        newNpc.HeadTexture = moddedNpc.HeadTexture;
                        newNpc.TextureLighting = moddedNpc.TextureLighting;
                        newNpc.HairColor = moddedNpc.HairColor;
                        newNpc.FacialMorphIntensity = moddedNpc.FacialMorphIntensity;

                        Console.WriteLine("\t- Looks Changed");
                        wasChanged = true;
                    }
                }

                if (moddedFields.Voice)
                {
                    newNpc.Voice = moddedNpc.Voice;

                    Console.WriteLine("\t- Voice Type Changed");
                    wasChanged = true;
                }

                if (moddedFields.DefaultOutfit)
                {
                    newNpc.DefaultOutfit = moddedNpc.DefaultOutfit;

                    Console.WriteLine("\t- Outfit Changed");
                    wasChanged = true;
                }

                if (moddedFields.SleepingOutfit)
                {
                    newNpc.SleepingOutfit = moddedNpc.SleepingOutfit;

                    Console.WriteLine("\t- Sleep Outfit Changed");
                    wasChanged = true;
                }

                // Things go here that have to be consistent regardless of GC changing them or not.
                if (newNpc.Name != moddedNpc.Name || newNpc.ShortName != moddedNpc.ShortName)
                {
                    newNpc.Name = moddedNpc.Name;
                    newNpc.ShortName = moddedNpc.ShortName;

                    Console.WriteLine("\t- Name Changed");
                    wasChanged = true;
                }

                /*if (moddedNpc.TemplateActors is not null && (moddedNpc.UseTemplateActors & Npc.TemplateActorType.Traits) > 0)
                {
                    newNpc.UseTemplateActors |= Npc.TemplateActorType.Traits;
                    if (newNpc.TemplateActors is null)
                        newNpc.TemplateActors = new TemplateActors();

                    newNpc.TemplateActors.TraitTemplate = moddedNpc.TemplateActors.TraitTemplate; // Trait template governs looks and voice type.
                }*/

                if (wasChanged)
                    state.PatchMod.Npcs.Add(newNpc);
            }

            foreach (var moddedCellBlock in GroundedCommonwealth.Cells)
            {
                foreach (var moddedCellSubBlock in moddedCellBlock.SubBlocks)
                {
                    foreach (var moddedCell in moddedCellSubBlock.Cells)
                    {
                        List<IModContext<IFallout4Mod, IFallout4ModGetter, ICell, ICellGetter>> cellOverrides = moddedCell.ToLink().ResolveAllContexts<IFallout4Mod, IFallout4ModGetter, ICell, ICellGetter>(state.LinkCache).ToList();
                        try
                        {
                            string newCellName = cellOverrides[0].Record.Name?.String ?? "";
                            string oldCellName = cellOverrides[cellOverrides.Count - 1].Record.Name?.String ?? "";
                            string moddedCellName = moddedCell.Name?.String ?? "";
                            if ((newCellName != moddedCellName && oldCellName != moddedCellName) || (!cellOverrides[0].Record.Music.Equals(moddedCell.Music) && !cellOverrides[cellOverrides.Count - 1].Record.Music.Equals(moddedCell.Music)))
                            {
                                var newCell = cellOverrides[0].GetOrAddAsOverride(state.PatchMod);
                                Console.WriteLine($"\nProcessing {newCell}");
                                if (oldCellName != moddedCellName)
                                {
                                    newCell.Name = moddedCell.Name;
                                    Console.WriteLine("\t- Name Changed");
                                }

                                if (!cellOverrides[cellOverrides.Count - 1].Record.Music.Equals(moddedCell.Music))
                                {
                                    newCell.Music = moddedCell.Music;
                                    Console.WriteLine("\t- Music Changed");
                                }
                            }

                        }
                        catch(Exception ex)
                        {
                            Console.WriteLine(cellOverrides[0].Record + "\n" + ex.ToString());
                        }
                    }
                }
            }

            foreach (var moddedQuest in GroundedCommonwealth.Quests)
            {
                var questOverrides = moddedQuest.ToLink().ResolveAllContexts<IFallout4Mod, IFallout4ModGetter, IQuest, IQuestGetter>(state.LinkCache).ToList();

                if (questOverrides.Count <= 1)
                    continue;

                MergeObjectiveText(state, moddedQuest, questOverrides[0], questOverrides[^1]);
                MergeStageText(state, moddedQuest, questOverrides[0], questOverrides[^1]);
            }

            foreach (var moddedIngestible in GroundedCommonwealth.Ingestibles)
            {
                List<IModContext<IFallout4Mod, IFallout4ModGetter, IIngestible, IIngestibleGetter>> ingestibleOverrides = moddedIngestible.ToLink().ResolveAllContexts<IFallout4Mod, IFallout4ModGetter, IIngestible, IIngestibleGetter>(state.LinkCache).ToList();
                if (ingestibleOverrides.Count <= 0)
                    throw new Exception($"Couldn't resolve {moddedIngestible}");

                if (ingestibleOverrides[0].Record.Name.EmptyIfNull().Equals(moddedIngestible.Name))
                    continue;

                var newIngestible = state.PatchMod.Ingestibles.GetOrAddAsOverride(ingestibleOverrides[0].Record);
                newIngestible.Name = moddedIngestible.Name;
            }

            foreach (var lvlNpcGetter in state.LoadOrder.PriorityOrder.LeveledNpc().WinningOverrides())
            {
                if (lvlNpcGetter.EditorID is null || lvlNpcGetter.Entries is null)
                    continue;

                bool removeAll = RemoveAll.Any(entry => lvlNpcGetter.EditorID.Contains(entry, StringComparison.OrdinalIgnoreCase));
                bool removeSome = RemoveSome.Any(entry => lvlNpcGetter.EditorID.Contains(entry, StringComparison.OrdinalIgnoreCase));
                if (!removeAll && !removeSome)
                    continue;

                bool wasChanged = false;
                var lvlNpcSetter = lvlNpcGetter.DeepCopy();
                for (int i = lvlNpcSetter.Entries!.Count - 1; i >= 0; --i)
                {
                    if (lvlNpcSetter.Entries[i].Data is null)
                        continue;

                    if (!lvlNpcSetter.Entries[i].Data!.Reference.TryResolve<INpcGetter>(state.LinkCache, out var npcEntry))
                        continue;

                    bool shouldRemove = false;
                    minBrightnessVal = System.Drawing.Color.FromArgb(1, 107, 107, 126).GetBrightness();
                    bool inheritsTraits = npcEntry.UseTemplateActors.HasFlag(Npc.TemplateActorType.Traits);
                    if (inheritsTraits && npcEntry.TemplateActors is not null)
                    {
                        if (!npcEntry.TemplateActors.TraitTemplate.TryResolve<INpcGetter>(state.LinkCache, out var templateEntry))
                            continue;

                        shouldRemove = templateEntry.Flags.HasFlag(Npc.Flag.Female) && removeAll;
                        try
                        {
                            shouldRemove |= (templateEntry.FaceTintingLayers.First(tint => tint.Index == 1156)?.Color.GetBrightness() ?? 1) <= minBrightnessVal;
                        }
                        catch (InvalidOperationException) { }
                    }
                    else
                    {
                        shouldRemove = npcEntry.Flags.HasFlag(Npc.Flag.Female) && removeAll;
                        try
                        {
                            shouldRemove |= (npcEntry.FaceTintingLayers.First(tint => tint.Index == 1156)?.Color.GetBrightness() ?? 1) <= minBrightnessVal;
                        }
                        catch (InvalidOperationException) { }
                    }

                    if (!shouldRemove)
                        continue;

                    lvlNpcSetter.Entries.RemoveAt(i);
                    wasChanged = true;
                }

                if (lvlNpcSetter.Entries.Count <= 0)
                {
                    Console.WriteLine($"Leveled list {lvlNpcGetter} was changed but all entries were removed. Restoring to original.");
                    continue;
                }

                if (wasChanged)
                {
                    Console.WriteLine($"Processing leveled list {lvlNpcGetter}");
                    state.PatchMod.LeveledNpcs.Set(lvlNpcSetter);
                }
            }

            foreach (var moddedLvlNpc in GroundedCommonwealth.LeveledNpcs)
            {
                List<IModContext<IFallout4Mod, IFallout4ModGetter, ILeveledNpc, ILeveledNpcGetter>> lvlOverrides = moddedLvlNpc.ToLink().ResolveAllContexts<IFallout4Mod, IFallout4ModGetter, ILeveledNpc, ILeveledNpcGetter>(state.LinkCache).ToList();
                if (lvlOverrides.Count <= 0)
                    throw new Exception($"Couldn't resolve {moddedLvlNpc}");

                // Skip unique lists.
                if (lvlOverrides.Count == 1)
                    continue;
                
                var newEntries = moddedLvlNpc.Entries.EmptyIfNull().Where(entry => !lvlOverrides[^1].Record.Entries.EmptyIfNull().Contains(entry)).ToList();
                var removedEntries = lvlOverrides[^1].Record.Entries.EmptyIfNull().Where(entry => !moddedLvlNpc.Entries.EmptyIfNull().Contains(entry)).ToList();
                if (newEntries.Count > 0 || removedEntries.Count > 0)
                {
                    var newLvlNpc = state.PatchMod.LeveledNpcs.GetOrAddAsOverride(moddedLvlNpc);
                    foreach (var entry in removedEntries)
                        newLvlNpc.Entries.RemoveWhere(x => x.Data?.Reference.Equals(entry.Data?.Reference) ?? false);

                    foreach (var entry in newEntries)
                    {
                        if (newLvlNpc.Entries is null)
                            newLvlNpc.Entries = new();
                        newLvlNpc.Entries.Add(entry);
                    }
                }
            }

            Console.WriteLine("\nProcessing finished.");
        }
    }
}
